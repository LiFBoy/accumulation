import React from 'react';
import styles from '!style!css?module!./monster.css';
import Panel from 'DatePicker';


function copyDate(date) {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate());
}
function getWeek(value){
    value = getThisWeekDay(value);
    return Math.floor((value.getTime() - new Date(value.getFullYear(),0,1).getTime()) / 1000 / 60 / 60 / 24 / 7) + 1;
}

function getThisWeekDay(date){
    return new Date(date.getFullYear(),date.getMonth(),date.getDate() + 4 - date.getDay());
}

export var Monster = React.createClass({
    getInitialState() {
        return {type:'date',open: false,from: copyDate(this.props.from),to:copyDate(this.props.to)};
    },
    toggle() {
        this.setState({
            open: !this.state.open,
            from: copyDate(this.props.from),
            to:copyDate(this.props.to)
        });
    },
    onChange() {
        var from = this.state.from;
        var to = this.state.to;
        if (from.getTime() > to.getTime()) {
            alert('起始时间不能大于结束时间哦');
            return;
        }
        this.props.onChange(from, to);
        this.setState({open: false});
    },
    fromToday() {
        this.setState({ from: copyDate(new Date()) });
    },
    toToday(){
        this.setState({ to: copyDate(new Date()) });
    },
    componentWillReceiveProps(nextProps) {
        if (nextProps.from.getTime() !== this.props.from.getTime())
            this.setState({from: nextProps.from});


        if(nextProps.to.getTime() !== this.props.to.getTime())
            this.setState({to:nextProps.to});

    },
    render() {
        var type = this.props.type;

        var from = this.props.from;
        var year = type==='week' ? getThisWeekDay(from).getFullYear():from.getFullYear(), 
            month = from.getMonth() + 1, 
            week = getWeek(from),
            date = from.getDate();
        

        var to = this.props.to;
        var toyear = (type==='week' ? getThisWeekDay(to):to).getFullYear(), 
            tomonth = to.getMonth() + 1, 
            toweek = getWeek(to),
            todate = to.getDate();

        var params = {
            date:{width:340,left:211,height:271,title:year + '年 ' + month + '月' + date + '日 ~ ' + toyear + '年 ' + tomonth + '月' + todate + '日'},
            week:{width:320,left:241,height:270,title:year + '年 第' + week + '周 ~ '+ toyear + '年 第' + toweek + '周'},
            month:{width:290,left:241,height:150,title:year + '年 ' + month + '月 ~ ' + toyear + '年 ' + tomonth + '月'},
            year:{width:220,left:241,height:211,title:year + '年 ~ ' + toyear + '年'},
            all:{width:340,left:211,height:271,title:year + '年 ' + month + '月' + date + '日 ~ ' + toyear + '年 ' + tomonth + '月' + todate + '日'}
        }[type];


        return <div id={styles.container} style={Object.assign({width:340},this.props.style)} >
            <div onClick={this.toggle} className={styles.middle}>
                {params.title}
                <span className={styles.calendar} />
            </div>          

            {this.state.open && <div className={styles.bigPanel} style={{width:params.left*2,height:params.height + 30}}>
                {<div className={styles.types}>
                    {[
                     {key:'date',value:'日'},
                     {key:'week',value:'周'},
                     {key:'month',value:'月'},
                     {key:'year',value:'年'},
                     {key:'all',value:'全部'}
                    ].map(o=><div
                        key={o.key}
                        onClick={()=>this.props.onChangeType(o.key)}
                        className={o.key==type?styles.highlight:""}
                    >
                        {o.value}
                    </div>)}
                </div>}

                <Panel 
                    type={type=='all'?'date':type}
                    value={this.state.from} 
                    onChange={o=>this.setState({from:copyDate(o)})} 
                    onCancel={this.toggle}
                    onConfirm={this.onChange}
                    position={'from'}
                    style={{left:-1,top:30}}
                />

                <Panel 
                    type={type=='all'?'date':type}
                    value={this.state.to} 
                    onChange={o=>this.setState({to:copyDate(o)})} 
                    onCancel={this.toggle}
                    onConfirm={this.onChange}
                    position={'to'}
                    style={{left:params.left-1,top:30,borderLeftWidth:1}}
                />
            </div>}
        </div>;
    }
});